cens = as.integer(data$cens),
# Prior params
u = RW2_control$u,
alpha = RW2_control$alpha,
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(B2) + ncol(X)),
theta = 0
)
ff <- TMB::MakeADFun(
data = c(model = "fixed_smooth", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
## Here with bug currently
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, startingvalue = 0)
}
else if(length(fixed) > 0 & length(frailty) == 0 & length(RW2) == 0){
## Create X design
X <- as(as.matrix(data[fixed]), "dgTMatrix")
tmbdat <- list(
# Design matrix
X = X,
# Differencing matrix
D = D,
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(X))
)
ff <- TMB::MakeADFun(
data = c(model = "fixed", tmbdat),
parameters = tmbparams,
# random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
return(ff)
opt <- nlminb(start = ff$par, objective = ff$fn, gradient = ff$gr, hessian = ff$he,
control = list(eval.max = 20000, iter.max = 20000))
prec_matrix <- forceSymmetric(ff$he(opt$par))
## also with Bug currently..
return(list(mean = opt$par, prec = as.matrix(prec_matrix), opt = opt))
}
else if(length(fixed) == 0 & length(frailty) == 0 & length(RW2) == 1){
## Create B2 design
## Create P2 precision
u2 <- as.numeric(data[RW2][,1])
B2 <- RW2_design_comp(x = u2, r = RW2_control$r)
P2 <- RW2_prec_comp(x = u2, r = RW2_control$r, diag_noise = RW2_control$diag_noise)
tmbdat <- list(
# Design matrix
B2 = B2,
# Penalty matrix
P2 = P2,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logP2det = as.numeric(determinant(P2,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = RW2_control$u,
alpha = RW2_control$alpha
)
tmbparams <- list(
W = rep(0, ncol(B2)),
theta = 0
)
ff <- TMB::MakeADFun(
data = c(model = "smooth", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, c(0))
}
else{
stop("Model does not have a TMB template yet, need to manually implement.")
}
}
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi")
a
a$fn()
a$fn(1)
a$fn(3)
a$fn(30)
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi")
a
a$fn()
?TMB::MakeADFun
abcoxp <- function(data, times, cens, fixed = NULL, frailty = NULL, RW2 = NULL,
fixed_control = list(betaprec = .001), frailty_control = list(alpha = 0.5, u = 1),
RW2_control = list(alpha = 0.5, u = 1, r = 50, diag_noise = 0.0001),
Inference_control = list(aghq_k = 4)){
data <- cbind(data[times], data[cens], data[fixed], data[frailty], data[RW2])
colnames(data) <- c("times", "cens", fixed, frailty, RW2)
data <- dplyr::arrange(data, by = times)
data$ranks <- rank(data$times, ties.method = "min")
n <- nrow(data)
D <- cbind(Matrix::Matrix(1,n-1,1),Matrix::Diagonal(n-1,-1))
if(length(fixed) > 0 & length(frailty) == 1 & length(RW2) == 1){
## Create X, B1, B2 design
## Create P2 precision
X <- as(as.matrix(data[fixed]), "dgTMatrix")
u1 <- as.numeric(data[frailty][,1])
B1 <- Matrix::Diagonal(n = n)[match(u1,unique(u1)),order(unique(u1))]
u2 <- as.numeric(data[RW2][,1])
B2 <- RW2_design_comp(x = u2, r = RW2_control$r)
P2 <- RW2_prec_comp(x = u2, r = RW2_control$r, diag_noise = RW2_control$diag_noise)
tmbdat <- list(
# Design matrix
X = X,
B1 = B1,
B2 = B2,
# Penalty matrix
P2 = P2,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logP2det = as.numeric(determinant(P2,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u1 = frailty_control$u,
alpha1 = frailty_control$alpha,
u2 = RW2_control$u,
alpha2 = RW2_control$alpha,
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(B1) + ncol(B2) + ncol(X)),
theta1 = 0, # -2log(sigma)
theta2 = 0
)
ff <- TMB::MakeADFun(
data = c(model = "fixed_smooth_frailty", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, c(0,0))
}
else if(length(fixed) > 0 & length(frailty) == 1 & length(RW2) == 0){
## Create X, B1 design
X <- as(as.matrix(data[fixed]), "dgTMatrix")
u1 <- as.numeric(data[frailty][,1])
B1 <- Matrix::Diagonal(n = n)[match(u1,unique(u1)),order(unique(u1))]
tmbdat <- list(
# Design matrix
X = X,
B1 = B1,
# Differencing matrix
D = D,
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = frailty_control$u,
alpha = frailty_control$alpha,
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(B1) + ncol(X)),
theta = 0 # -2log(sigma)
)
ff <- TMB::MakeADFun(
data = c(model = "fixed_frailty", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, c(0))
}
else if(length(fixed) > 0 & length(frailty) == 0 & length(RW2) == 1){
## Create X, B2 design
## Create P2 precision
X <- as(as.matrix(data[fixed]), "dgTMatrix")
u2 <- as.numeric(data[RW2][,1])
B2 <- RW2_design_comp(x = u2, r = RW2_control$r)
P2 <- RW2_prec_comp(x = u2, r = RW2_control$r, diag_noise = RW2_control$diag_noise)
tmbdat <- list(
# Design matrix
X = X,
B2 = B2,
# Penalty matrix
P2 = P2,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logP2det = as.numeric(determinant(P2,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = RW2_control$u,
alpha = RW2_control$alpha,
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(B2) + ncol(X)),
theta = 0
)
ff <- TMB::MakeADFun(
data = c(model = "fixed_smooth", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
## Here with bug currently
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, startingvalue = 0)
}
else if(length(fixed) > 0 & length(frailty) == 0 & length(RW2) == 0){
## Create X design
X <- as(as.matrix(data[fixed]), "dgTMatrix")
tmbdat <- list(
# Design matrix
X = X,
# Differencing matrix
D = D,
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
betaprec = fixed_control$betaprec
)
tmbparams <- list(
W = rep(0,ncol(X))
)
ff <- TMB::MakeADFun(
data = c(model = "fixed", tmbdat),
parameters = tmbparams,
# random = "W",
DLL = "abcoxp_TMBExports",
silent = F
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
return(ff)
opt <- nlminb(start = ff$par, objective = ff$fn, gradient = ff$gr, hessian = ff$he,
control = list(eval.max = 20000, iter.max = 20000))
prec_matrix <- forceSymmetric(ff$he(opt$par))
## also with Bug currently..
return(list(mean = opt$par, prec = as.matrix(prec_matrix), opt = opt))
}
else if(length(fixed) == 0 & length(frailty) == 0 & length(RW2) == 1){
## Create B2 design
## Create P2 precision
u2 <- as.numeric(data[RW2][,1])
B2 <- RW2_design_comp(x = u2, r = RW2_control$r)
P2 <- RW2_prec_comp(x = u2, r = RW2_control$r, diag_noise = RW2_control$diag_noise)
tmbdat <- list(
# Design matrix
B2 = B2,
# Penalty matrix
P2 = P2,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logP2det = as.numeric(determinant(P2,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = RW2_control$u,
alpha = RW2_control$alpha
)
tmbparams <- list(
W = rep(0, ncol(B2)),
theta = 0
)
ff <- TMB::MakeADFun(
data = c(model = "smooth", tmbdat),
parameters = tmbparams,
random = "W",
DLL = "abcoxp_TMBExports",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff, k = Inference_control$aghq_k, c(0))
}
else{
stop("Model does not have a TMB template yet, need to manually implement.")
}
}
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi")
a
a$fn()
a$fn(1)
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi",
fixed_control = list(betaprec = .1))
a
a$fn()
Leuk
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi", frailty = "sex",
fixed_control = list(betaprec = .1))
a
plot(a)
a$modesandhessians
a$optresults$ff
a$optresults$ff$fn()
a$optresults$ff$par
a$optresults$ff$fn(3)
a <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi",
fixed_control = list(betaprec = .1))
a
a$fn()
a$report()
library(abcoxp)
ff <- abcoxp(data = Leuk, times = "time", cens = "cens", fixed = "tpi",
fixed_control = list(betaprec = .1))
ff
ff$report()
a
source('~/Documents/abcoxp/R/model_construction.R', echo=TRUE)
colnames(kidney)
colnames(surivival:kidney)
colnames(survival::kidney)
a <- abcoxp_fit(data = survival::kidney, times = "time", cens = "status",
fixed = "sex", RW2 = "age")
colnames(survival::kidney)
a <- abcoxp_fit(data = survival::kidney, times = "time", cens = "status",
fixed = "frail", RW2 = "age")
library(Matrix)
a <- abcoxp_fit(data = survival::kidney, times = "time", cens = "status",
fixed = "frail", RW2 = "age")
library(abcoxp)
a <- abcoxp_fit(data = survival::kidney, times = "time", cens = "status",
fixed = "frail", RW2 = "age")
a
a$model
a$data
length(c(1,23)) == length(c(1,2,3)) == 1
rmvnp
fitted_model <- a
?LaplacesDemon::rmvnp
X <- rmvnp(1000, c(0,1,2), diag(3))
X <- LaplacesDemon::rmvnp(1000, c(0,1,2), diag(3))
X
fitted_model$components$RW2
fitted_model$components$frailty
?aghq::sample_marginal
all_samps <- aghq::sample_marginal(fitted_model$model, M = nsamps)
nsamps = 100
all_samps <- aghq::sample_marginal(fitted_model$model, M = nsamps)
all_samps
dim(all_samps$samps)
B2 <- fitted_model$B2
K2 <- ncol(B2)
K1 = 0
RW2_weights_samps <- t(all_samps$samps[(K1+1):(K1+K2),])
RW2_weights_samps
dim(RW2_weights_samps)
B2 %*% all_samps$samps[(K1+1):(K1+K2),]
dim(B2 %*% all_samps$samps[(K1+1):(K1+K2),])
matplot(B2 %*% all_samps$samps[(K1+1):(K1+K2),])
matplot(B2 %*% all_samps$samps[(K1+1):(K1+K2),1:10])
matplot(B2 %*% all_samps$samps[(K1+1):(K1+K2),1:10], type = 'l')
dim(all_samps$samps[(K1+1):(K1+K2),])
matplot(t(B2 %*% all_samps$samps[(K1+1):(K1+K2),1:10]), type = 'l')
plot(t(B2 %*% all_samps$samps[(K1+1):(K1+K2),1:1]), type = 'l')
RW2_values_samps <- data.frame(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps <- cbind(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps
RW2_values_samps[,1]
RW2_values_samps[,2]
RW2_values_samps[,3]
RW2_values_samps[,1]
RW2_values_samps$x
RW2_values_samps <- as.data.frame(RW2_values_samps)
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps
RW2_values_samps$x
RW2_values_samps <- dplyr::arrange(RW2_values_samps, by = x)
RW2_values_samps
RW2_values_samps$V2
RW2_values_samps$x
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x)
RW2_values_samps
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x, keep.all = T)
RW2_values_samps
?dplyr::distinct
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x, .keep_all = T)
RW2_values_samps
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x,
.keep_all = TRUE)
RW2_values_samps <- cbind(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x,
.keep_all = TRUE)
RW2_values_samps
library(survival)
kidney[2:,]
kidney[2:.,]
kidney[-c(1:3)]
kidney[c(1:3)]
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),])
colnames(beta_samps) <- c(fixed)
colnames(beta_samps) <- c(fitted_model$components$fixed)
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),])
colnames(beta_samps) <- c(fitted_model$components$fixed)
dim(beta_samps)
all_samps$samps[-c(1:(K1+K2)),]
dim(all_samps$samps[-c(1:(K1+K2)),])
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),,drop=FALSE])
beta_samps
frailty_samps <- t(all_samps$samps[1:K1,,drop=FALSE])
RW2_weights_samps <- t(all_samps$samps[(K1+1):(K1+K2),,drop=FALSE])
RW2_values_samps <- cbind(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x,
.keep_all = TRUE)
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),,drop=FALSE])
colnames(beta_samps) <- c(fitted_model$components$fixed)
colnames(beta_samps) <- c(fitted_model$components$fixed)
beta_samps
RW2_values_samps
View(RW2_values_samps)
all_samps
all_samps$theta
abcoxp_sampling <- function(fitted_model, nsamps){
if(length(fitted_model$components$RW2) == 0 & length(fitted_model$components$frailty) == 0){
beta_samps <- LaplacesDemon::rmvnp(n = nsamps, mu = fitted_model$model$mean, Omega = as.matrix(fitted_model$model$prec))
colnames(beta_samps) <- c(fitted_model$components$fixed)
return(list(fixed_samps = beta_samps))
}
else{
all_samps <- aghq::sample_marginal(fitted_model$model, M = nsamps)
if(length(fitted_model$components$RW2)== 1 & length(fitted_model$components$frailty) == 1){
B1 <- fitted_model$B1
B2 <- fitted_model$B2
K1 <- ncol(B1)
K2 <- ncol(B2)
frailty_samps <- t(all_samps$samps[1:K1,,drop=FALSE])
RW2_weights_samps <- t(all_samps$samps[(K1+1):(K1+K2),,drop=FALSE])
RW2_values_samps <- cbind(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x,
.keep_all = TRUE)
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),,drop=FALSE])
colnames(beta_samps) <- c(fitted_model$components$fixed)
return(list(fixed_samps = beta_samps, frailty_samps = frailty_samps,
RW2_values_samps = RW2_values_samps, RW2_weights_samps = RW2_weights_samps,
frailty_SD = sqrt(1/exp(all_samps$theta1)),
RW2_SD = sqrt(1/exp(all_samps$theta2))))
}
else if(length(fitted_model$components$RW2)== 0 & length(fitted_model$components$frailty) == 1){
B1 <- fitted_model$B1
K1 <- ncol(B1)
K2 <- 0
frailty_samps <- t(all_samps$samps[1:K1,,drop=FALSE])
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),,drop=FALSE])
colnames(beta_samps) <- c(fitted_model$components$fixed)
return(list(fixed_samps = beta_samps, frailty_samps = frailty_samps,
frailty_SD = sqrt(1/exp(all_samps$theta))))
}
else if(length(fitted_model$components$RW2)== 1 & length(fitted_model$components$frailty) == 0){
B2 <- fitted_model$B2
K2 <- ncol(B2)
K1 <- 0
RW2_weights_samps <- t(all_samps$samps[(K1+1):(K1+K2),,drop=FALSE])
RW2_values_samps <- cbind(x = fitted_model$data[[fitted_model$components$RW2]], B2 %*% all_samps$samps[(K1+1):(K1+K2),])
RW2_values_samps <- as.data.frame(as.matrix(RW2_values_samps))
RW2_values_samps <- dplyr::distinct(dplyr::arrange(RW2_values_samps, by = x), x,
.keep_all = TRUE)
beta_samps <- t(all_samps$samps[-c(1:(K1+K2)),,drop=FALSE])
colnames(beta_samps) <- c(fitted_model$components$fixed)
return(list(fixed_samps = beta_samps,
RW2_values_samps = RW2_values_samps, RW2_weights_samps = RW2_weights_samps,
RW2_SD = sqrt(1/exp(all_samps$theta))))
}
}
}
abcoxp_sampling(fitted_model = fitted_model, 300)
samples <- abcoxp_sampling
samples <- abcoxp_sampling(fitted_model = fitted_model, 300)
samples$fixed_samps
samples$fixed_samps %>% mean()
hist(samples$fixed_samps)
